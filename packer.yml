# Â© 2018 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. 
# This AWS Content is provided subject to the terms of the AWS Customer Agreement 
# available at http://aws.amazon.com/agreement or other written agreement between 
# Customer and Amazon Web Services, Inc.

- hosts: all
  vars:
    packer_url: 'https://releases.hashicorp.com/packer/1.3.3/packer_1.3.3_linux_amd64.zip'
    virtualbox_version: 'VirtualBox-5.2'
    s3_repo: 's3://clerckj/packer-windows'
  gather_facts: no
  tasks:
    - name: Wait for system to become reachable over SSH
      wait_for_connection:
        timeout: 900
    - name: Add virtualbox repository
      yum_repository:
        baseurl: http://download.virtualbox.org/virtualbox/rpm/el/$releasever/$basearch
        name: virtualbox
        description: Virtualbox repo
        enabled: 1
        gpgcheck: 1
        repo_gpgcheck: 1
        gpgkey: https://www.virtualbox.org/download/oracle_vbox.asc
      become: true
    - name: Update the system
      yum:
        name: "*"
        state: latest
      register: task_result
      become: true
    - name: Check for reboot hint.
      shell: LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}'); CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then echo 'reboot'; else echo 'no'; fi
      ignore_errors: true
      register: reboot_hint
    - name: Reboot immediately if there was a change.
      shell: "sleep 5 && reboot"
      async: 1
      poll: 0
      when: reboot_hint.stdout.find("reboot") != -1
    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: reboot_hint.stdout.find("reboot") != -1
      become: true
    - name: Install standard packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - unzip
        - epel-release
        - nvme-cli
      become: true
    - name: Install epel packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-pip
        - dkms
        - kernel-devel
        - kernel-headers
        - gcc
        - make
      become: true
    - name: Install VirtualBox
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - "{{ virtualbox_version }}"
      become: true
    - name: Install aws cli dependencies
      pip:
        name: "{{ item }}"
      with_items:
        - awscli
      become: true
    - name: Find available nvme partition
      shell:
        cmd: nvme list | grep Instance | awk -F ' ' '{print $1}'
      register: nvme_part
      become: true
    - name: "debug nvme"
      debug:
        msg: "{{ nvme_part }}"
    - name: Create a partition on NVME
      parted:
        device: "{{ nvme_part.stdout_lines[0] }}"
        number: 1
        state: present
      become: true
    - name: format filesystem
      filesystem:
        dev: "{{ nvme_part.stdout_lines[0] }}p1"
        force: yes
        fstype: ext4
      become: true
      ignore_errors: yes
    - name: create folder
      file:
        path: /opt/workdir
        state: directory
        mode: 0755
        owner: centos
        group: centos
      become: true
    - name: mount filesystem
      mount:
        path: /opt/workdir/
        src: "{{ nvme_part.stdout_lines[0] }}p1"
        state: mounted
        fstype: ext4
      become: true
    - name: create folder
      file:
        path: /opt/workdir
        state: directory
        mode: 0755
        owner: centos
        group: centos
      become: true
    - name: Unzip packer
      unarchive:
        src: "{{ packer_url }}"
        dest: /opt/workdir/
        remote_src: yes
      become: true
    - name: Make packer executable
      file:
        path: /opt/workdir/packer
        mode: 0755
      become: true
    - name: Copy Windows10 from S3
      shell:
        cmd: aws s3 sync {{ s3_repo }} /opt/workdir/packer-windows/
    - name: build Windows 10
      shell:
        cmd: "/opt/workdir/packer build --only virtualbox-iso windows_10.json"
      args:
        chdir: "/opt/workdir/packer-windows"  
    - name: copy artefact to s3
      shell:
        cmd: aws s3 cp ./output-virtualbox-iso/*.vmdk s3://clerckj/
      args:
        chdir: "/opt/workdir/"
